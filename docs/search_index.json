[
["index.html", "A plotly tutoRial Overview", " A plotly tutoRial Carson Sievert Overview This website explains and partially documents the R package plotly, a high-level interface to the open source JavaScript graphing library plotly.js (which powers plot.ly). The R package already has numerous examples and documentation on https://plot.ly/r and https://plot.ly/ggplot2, but this website provides more of a cohesive narrative to help explain fundamental concepts and recent developments. By reading from start to finish, readers new to R and plotly should be able to get up and running fairly quickly. That being said, advanced R and plotly users should still find the majority of this material useful and informative. I highly recommend copying/pasting examples into your R console, and modifying them as you read along, to aid the learning process. This work is licensed under the Creative Commons Attribution-NonCommercial-NoDerivs 3.0 United States License. "],
["installation.html", "Installation", " Installation If you have R installed, you can install the stable release of plotly by typing this in your R console: install.packages(&quot;plotly&quot;) Or you can install the development release via the devtools package: if (!require(&quot;devtools&quot;)) install.packages(&quot;devtools&quot;) devtools::install_github(&quot;ropensci/plotly&quot;) "],
["get-started.html", "Get started", " Get started To ensure plotly is installed correctly, try loading the package and creating this example by pasting the code inside your R console. library(plotly) plot_ly(z = ~volcano) plotly uses the htmlwidget framework, which allows plots to work seamlessly and consistently in various contexts (e.g., R Markdown documents, shiny apps, inside RStudio, or any other R command prompt) without an internet connection. IPython/Jupyter notebook users should wrap plots with the embed_notebook() function to embed them inline inside a notebook. "],
["plot-ly-for-collaboration.html", "plot.ly for collaboration", " plot.ly for collaboration plot.ly subscribers can use plotly_POST() function to publish plots onto plotly’s web platform. This platform makes it very easy to host/share your graphs, collaborate with others, and is free to use for public graphs (have a look at our pricing options if you need privacy or customer support). Once a plot is hosted on your account, others may copy/fork your graph to their account (given the right permissions) using a friendly user-interface. As long as you can view a plot hosted on http://plot.ly, you can obtain the data behind with plot via the get_figure() function. This makes it easy to access and modify plots created with any plotly.js interface (e.g., Python, MATLAB, Julia, Scala, etc) from your R console. Not only is this web-based user-interface to plotly.js useful for collaborating with others, but it is also useful for completing tasks that are cumbersome to do at the command-line. For instance, annotations can be added to any plot via a point-and-click interface: -->"],
["two-approaches-one-object.html", "1 Two approaches, one object", " 1 Two approaches, one object There are two main ways to initiate a plotly object in R. The plot_ly() function transforms data into a plotly object, while the ggplotly() function transforms a ggplot object into a plotly object (Wickham 2009); (Sievert et al. 2016). Regardless how plotly object is created, printing it results in an interactive web-based visualization with tooltips, zooming, and panning enabled by default. It is also possible to enable more advanced interactive techniques, such as animation and linked highlighting. The initial inspiration for the plot_ly() function was to support plotly.js chart types that ggplot2 doesn’t support, such as 3D surface and mesh plots. Over time, this effort snowballed into a full-blown interface to the entire plotly.js graphing library with additional abstractions inspired by the grammar of graphics (Wilkinson 2005). This “non-ggplot2” interface to plotly.js is (somewhat intentionally) not as fully featured as ggplot2 to provide more efficient alternative for certain plots. Also, by having high-level functions that can modify plotly objects, we’re also able to extend ggplotly(). In the next section, we introduce some similarities and differences between ggplotly() and plot_ly() through a case study. References "],
["a-case-study-of-housing-sales-in-texas.html", "1.1 A case study of housing sales in Texas", " 1.1 A case study of housing sales in Texas The plotly package depends on ggplot2 which bundles a data set on monthly housing sales in Texan cities acquired from the TAMU real estate center. After the loading the package, the data is “lazily loaded” into your session, so you may reference it by name: library(plotly) txhousing ## # A tibble: 8,602 × 9 ## city year month sales volume median listings inventory date ## &lt;chr&gt; &lt;int&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 Abilene 2000 1 72 5380000 71400 701 6.3 2000.000 ## 2 Abilene 2000 2 98 6505000 58700 746 6.6 2000.083 ## 3 Abilene 2000 3 130 9285000 58100 784 6.8 2000.167 ## 4 Abilene 2000 4 98 9730000 68600 785 6.9 2000.250 ## 5 Abilene 2000 5 141 10590000 67300 794 6.8 2000.333 ## 6 Abilene 2000 6 156 13910000 66900 780 6.6 2000.417 ## 7 Abilene 2000 7 152 12635000 73500 742 6.2 2000.500 ## 8 Abilene 2000 8 131 10710000 75000 765 6.4 2000.583 ## 9 Abilene 2000 9 104 7615000 64500 771 6.5 2000.667 ## 10 Abilene 2000 10 101 7040000 59300 764 6.6 2000.750 ## # ... with 8,592 more rows In attempt to understand house price behavior over time, we could plot date on x, median on y, and group the lines connecting these x/y pairs by city. Using ggplot2, we can initiate a ggplot object with the ggplot() function which accepts a data frame and a mapping from data variables to visual aesthetics. By just initiating the object, ggplot2 won’t know how to geometrically represent the mapping until we add a layer to the plot via one of geom_*() (or stat_*()) functions (in this case, we want geom_line()). In this case, it is also a good idea to specify alpha transparency so that 5 lines plotted on top of each other appear as solid black, to help avoid overplotting. If you’re new to ggplot2, the ggplot2 cheatsheet provides a nice quick overview. The online docs or R graphics cookbook are helpful for learning by example, and the ggplot2 book provides a nice overview of the conceptual underpinnings. p &lt;- ggplot(txhousing, aes(date, median)) + geom_line(aes(group = city), alpha = 0.2) Now that we have a valid ggplot2 object, p, the plotly package provides the ggplotly() function which converts a ggplot object to a plotly object. By default, it supplies the entire aesthetic mapping to the tooltip, but the tooltip argument provides a way to restrict tooltip info to a subset of that mapping. Furthermore, in cases where the statistic of a layer is something other than the identity function (e.g., geom_bin2d() and geom_hex()), relevant “intermediate” variables generated in the process are also supplied to the tooltip. This provides a nice mechanism for decoding visual aesthetics (e.g., color) used to represent a measure of interest (e.g, count/value). In Figure ??, the subplot() function from the plotly package (discussed in more detail in subplots), which accepts a collection of ggplot and/or plotly objects, helps to concisely display tooltips for a number of scenarios, and how to suppress them. subplot( p, ggplotly(p, tooltip = &quot;city&quot;), ggplot(txhousing, aes(date, median)) + geom_bin2d(), ggplot(txhousing, aes(date, median)) + geom_hex(), nrows = 2, shareX = TRUE, shareY = TRUE, titleY = FALSE, titleX = FALSE ) Although ggplot2 does not have a text aesthetic, the ggplotly() function recognizes this aesthetic and displays it in the tooltip by default. In addition to providing a way to supply “meta” information, it also provides a way to customize your tooltips (do this by restricting the tooltip to the text aesthetic – ggplotly(p, tooltip = “text”)) The ggplotly() function translates most things that you can do in ggplot2, but not quite everything. To help demonstrate the coverage, I’ve built a plotly version of the ggplot2 docs. This version of the docs displays the ggplotly() version of each plot in a static form (to reduce page loading time), but you can click any plot to view its interactive version. The next section deomnstrates how to create plotly.js visualizations via the R package, without ggplot2, via the plot_ly() interface. We’ll then leverage those concepts to extend ggplotly(). 1.1.1 The plot_ly() interface The cognitive framework underlying the plot_ly() interface draw inspiration from the layered grammar of graphics (Wickham 2010), but in contrast to ggplotly(), it provides a more flexible and direct interface to plotly.js. It is more direct in the sense that it doesn’t call ggplot2’s sometimes expensive plot building routines, and it is more flexible in the sense that data frames are not required, which is useful for visualizing matrices, as shown in Get Started. Although data frames are not required, it is recommended to use them whenever possible, especially when constructing a plot with multiple layers or groups. When a data frame is associated with a plotly object, it allows us to manipulate the data underlying that object in the same way we would directly manipulate the data. Currently, plot_ly() borrows semantics from and provides special plotly methods for generic functions in the dplyr and tidyr packages (Wickham and Francois 2016); (Wickham, n.d.). Most importantly, plot_ly() recognizes and preserves groupings created with dplyr’s group_by(). library(dplyr) tx &lt;- group_by(txhousing, city) # initiate a plotly object with date on x and median on y p &lt;- plot_ly(tx, x = ~date, y = ~median) # plotly_data() returns data associated with a plotly object, note the group attribute! plotly_data(p) ## Source: local data frame [8,602 x 9] ## Groups: city [46] ## ## city year month sales volume median listings inventory date ## &lt;chr&gt; &lt;int&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 Abilene 2000 1 72 5380000 71400 701 6.3 2000.000 ## 2 Abilene 2000 2 98 6505000 58700 746 6.6 2000.083 ## 3 Abilene 2000 3 130 9285000 58100 784 6.8 2000.167 ## 4 Abilene 2000 4 98 9730000 68600 785 6.9 2000.250 ## 5 Abilene 2000 5 141 10590000 67300 794 6.8 2000.333 ## 6 Abilene 2000 6 156 13910000 66900 780 6.6 2000.417 ## 7 Abilene 2000 7 152 12635000 73500 742 6.2 2000.500 ## 8 Abilene 2000 8 131 10710000 75000 765 6.4 2000.583 ## 9 Abilene 2000 9 104 7615000 64500 771 6.5 2000.667 ## 10 Abilene 2000 10 101 7040000 59300 764 6.6 2000.750 ## # ... with 8,592 more rows Defining groups in this fashion ensures plot_ly() will produce at least one graphical mark per group.1 So far we’ve specified x and y attributes in the plotly object p, but we have not yet specified the geometric relation between these x/y pairs. Similar to geom_line() in ggplot2, the add_lines() function connects (a group of) x/y pairs with lines in the order of their x values, which is useful when plotting time series as shown in Figure ??. Similar to the ggplot() function in ggplot2, plot_ly() initializes a plot object, and any attributes defined here . # we get one line per city since p knows city is a grouping variable p2 &lt;- add_lines(p, alpha = 0.2, name = &quot;Texan Cities&quot;, hoverinfo = &quot;none&quot;) # add another line to highlight houston add_lines( p2, name = &quot;Houston&quot;, color = I(&quot;red&quot;), data = filter(txhousing, city == &quot;Houston&quot;) ) The plotly package has a collection of add_*() functions, all of which inherit attributes defined in plot_ly(). These functions also inherit the data associated with the plotly object provided as input, unless otherwise specified in the data argument. I prefer to think about add_*() functions like a layer in ggplot2, which is slightly different from the concept of a plotly.js trace. In Figure ??, there is a 1-to-1 correspondence between layers and traces, but as you will find in the The plotly cookbook, an add_*() function can produce numerous traces. In the first layer of Figure ??, there is one line per city, but this entire layer is implemented with a single trace. We could have produced one trace for each line, but this is expensive because, by default, each trace produces a legend entry and tries to display meaningful hover information. It is much more efficient to render this layer as a single trace with missing values to differentiate groups. In fact, this is exactly how the group aesthetic is translated in ggplotly(); otherwise, layers with many groups (e.g., geom_map()) would be slow to render. Since every plotly function modifies a plotly object (or the data underlying that object), we can express complex multi-layer plots as a sequence (or, more specifically, a directed acyclic graph) of data manipulations and mappings to the visual space. Moreover, plotly functions are designed to take a plotly object as input, and return a modified plotly object, making it easy to chain together operations via the pipe operator (%&gt;%) from the magrittr package (Bache and Wickham 2014). Consequently, we can re-express Figure ?? in a much more readable and understandable fashion. txhousing %&gt;% group_by(city) %&gt;% plot_ly(x = ~date, y = ~median) %&gt;% add_lines(alpha = 0.2, name = &quot;Texan Cities&quot;, hoverinfo = &quot;none&quot;) %&gt;% filter(city == &quot;Houston&quot;) %&gt;% add_lines(color = I(&quot;red&quot;), name = &quot;Houston&quot;) Not only does it make you txhousing %&gt;% group_by(city) %&gt;% plot_ly(x = ~date, y = ~median) %&gt;% add_lines(alpha = 0.2, name = &quot;Texan Cities&quot;, hoverinfo = &quot;none&quot;) %&gt;% group_by(date) %&gt;% summarise( q1 = quantile(median, 0.25, na.rm = TRUE), m = median(median, na.rm = TRUE), q3 = quantile(median, 0.75, na.rm = TRUE) ) %&gt;% add_lines(y = ~m, color = I(&quot;red&quot;), name = &quot;median&quot;) %&gt;% add_ribbons(ymin = ~q1, ymax = ~q3, color = I(&quot;red&quot;), name = &quot;IQR&quot;) TODO: (1) example with data passed explicity to data argument (2) example of multi layer plot without data frames This “data-plot-pipeline” is desirable for a number of reasons: (1) makes your code easier to read and understand (2) any generic function that modifies a data frame can be incorporated into the pipeline (TODO: write a section on writing S3 methods?) (3) as discussed in Linked Highlighting, it provides a natural mechanism for implementing the pipelines necessary for interactive graphics (Wickham et al. 2010). Note that, similar to ggplot(), plot_ly() only initiatizes the plot with “global” visual attributes This plot doesn’t tell us much (other than prices seems to be increasing overall) since it’s hard to see what’s happening in individual cities. We could highlight a particular series by subsetting the data References "],
["extending-ggplotly.html", "1.2 Extending ggplotly()", " 1.2 Extending ggplotly() p &lt;- ggplot(txhousing, aes(x = date, y = median)) + geom_line(aes(group = city), alpha = 0.3) + geom_smooth() ggplotly(p) %&gt;% filter(city == &quot;Houston&quot;) %&gt;% add_lines(color = I(&quot;red&quot;), name = &quot;Houston&quot;) Expose the pre-statistics data. "],
["choosing-an-interface-sec-choosing.html", "1.3 Choosing an interface {sec: choosing}", " 1.3 Choosing an interface {sec: choosing} library(plotly) d &lt;- subset(diamonds, carat &lt;= 2) p &lt;- ggplot(d, aes(log(carat), log(price))) + geom_hex() + geom_smooth(method = &quot;lm&quot;, colour = &quot;red&quot;, se = FALSE) ggplotly(p) That’s great, but there are a few reasons why this approach is limited: ggplot2’s interface wasn’t designed for interactive graphics. Directly extending the grammar to support more advanced types of interaction (e.g., linked brushing) is a risky endeavor. ggplot2 requires data frame(s) and can be inefficient (especially for time series). ggplot2 does not have a functional interface (making it awkward to combine with modern functional interfaces such as dplyr), and does not satisfy referential transparency (making it easier to program with – for more details, see ) ggplotly() tries to replicate exactly what you see in the corresponding static ggplot2 graph. To do so, it sends axis tick information to plotly as tickvals/ticktext properties, and consequently, axis ticks do not update on zoom events. -->"],
["the-plotly-cookbook.html", "2 The plotly cookbook", " 2 The plotly cookbook This chapter demonstrates the capabilities of plot_ly() through a series of examples. In a nutshell, plot_ly() aims to: Provide sensible defaults/messages/warnings based on the information supplied, but still allows for full customization through plotly.js’ (the open source JavaScript graphing library which powers plotly) figure reference. Leverage useful concepts from the grammar of graphics (without requiring it to be used). "],
["smart-defaults-messages-warnings-errors.html", "2.1 Smart defaults, messages, warnings, errors", " 2.1 Smart defaults, messages, warnings, errors If no visualization type is specified, plot_ly() infers a sensible type based on the information provided. In this case, a numeric matrix (named volcano) is mapped to the z attribute, so a heatmap is a sensible default. library(plotly) str(volcano) ## num [1:87, 1:61] 100 101 102 103 104 105 105 106 107 108 ... plot_ly(z = ~volcano) ## No trace type specified: ## Based on info supplied, a &#39;heatmap&#39; trace seems appropriate. ## Read more about this trace type -&gt; https://plot.ly/r/reference/#heatmap A heatmap is not the only way to visualize a numeric matrix. Since plot_ly() only initializes a plotly object, we can change the default visualization type using any of the add_*() functions: add_surface(plot_ly(z = ~volcano)) There are a number of add_*() functions, for a number "],
["functional-interface.html", "2.2 Functional interface", " 2.2 Functional interface Plotly’s R package has a functional interface: every function takes a plotly object as it’s first input argument and returns a modified plotly object. To make code more readable, plotly re-exports the pipe operator (%&gt;%) from the magrittr package. The pipe operator takes the object on the left-hand side and injects it into the first argument (by default) of the function on the right-hand side. This allows us to read code from left to right instead of inside out. # these two lines of code are equivalent, but the second is easier to read plotly_POST(add_surface(plot_ly(z = ~volcano))) plot_ly(z = ~volcano) %&gt;% add_surface() %&gt;% plotly_POST() plot_ly(diamonds, x = ~cut) plot_ly(diamonds, y = ~cut) To create a plotly visualization, start with plot_ly(). library(plotly) plot_ly(economics, x = ~date, y = ~unemploy / pop) A plotly visualization is composed of one (or more) trace(s), and every trace has a type (the default type is ‘scatter’). The arguments/properties that a trace will respect (documented here) depend on it’s type. A scatter trace respects mode, which can be any combination of “lines”, “markers”, “text” joined with a “+”: library(plotly) plot_ly(economics, x = ~date, y = ~unemploy / pop, type = &quot;scatter&quot;, mode = &quot;markers+lines&quot;) You can manually add a trace to an existing plot with add_trace(). In that case, you’ll want to either name your traces, or hide the legend by setting showlegend = FALSE m &lt;- loess(unemploy / pop ~ as.numeric(date), data = economics) p &lt;- plot_ly(economics, x = ~date, y = ~unemploy / pop, name = &quot;raw&quot;) add_lines(p, y = ~fitted(m), name = &quot;loess&quot;) plotly was designed with a pure, predictable, and pipeable interface in mind, so you can also use the %&gt;% operator to create a visualization pipeline: economics %&gt;% plot_ly(x = ~date, y = ~unemploy / pop) %&gt;% add_lines(y = ~fitted(m)) %&gt;% layout(showlegend = F) TODO: talk about dplyr verbs! library(dplyr) economics %&gt;% mutate(rate = unemploy / pop) %&gt;% plot_ly(x = ~date, y = ~rate) %&gt;% filter(rate == max(rate)) %&gt;% layout( showlegend = F, annotations = list(x = ~date, y = ~rate, text = &quot;Peak&quot;, showarrow = T) ) Although these functions output special “plotly data frames”, plot_ly() doesn’t require a data frame for input. This makes chart types that accept a z argument especially easy to use if you have a numeric matrix: s &lt;- plot_ly(z = volcano, type = &quot;surface&quot;) If you have a free plotly account, plotly_POST() makes it easy to host/share any plotly figure (click on the image below to see the interactive version). plotly_POST(s) https://plot.ly/~agvd/1794 "],
["special-arguments.html", "2.3 Special arguments", " 2.3 Special arguments The plotly function arguments used thus far are documented in the figure reference, but there are a handful of additional arguments not described in the reference that make common visualizations a bit easier. These arguments are very much inspired by the semantics of ggplot2’s qplot() in the sense that a scales are automatically applied these variables. 2.3.1 The color argument 2.3.1.1 Qualitative color mappings If a ordinal variable (aka a non-ordered factor variable) is assigned to color, then a qualitative color palette is used by default. plot_ly(iris, x = ~Petal.Length, y = ~Petal.Width, color = ~Species, mode = &quot;markers&quot;) If you want to change the default palette, it’s recommended that you provide a http://colorbrewer2.org qualitative pallette name (e.g., “Set1” or “Accent”) to the colors argument. plot_ly(iris, x = ~Petal.Length, y = ~Petal.Width, color = ~Species, colors = &quot;Set1&quot;, mode = &quot;markers&quot;) In this case, the palette consists of 9 colors and the default behavior is to pick colors that are furthest apart (“#E41A1C”, “#FF7F00”, and “#999999”). cols &lt;- RColorBrewer::brewer.pal(9, &quot;Set1&quot;) scales::show_col(cols) If you’d like more control over the mapping, you can provide a vector of colors (of appropriate length). cols &lt;- RColorBrewer::brewer.pal(nlevels(iris$Species), &quot;Set1&quot;) plot_ly(iris, x = ~Petal.Length, y = ~Petal.Width, color = ~Species, colors = cols, mode = &quot;markers&quot;) 2.3.1.2 Sequential color mappings If either a numeric or an ordered factor is mapped to color, plot_ly() applies a sequential color scale by default. plot_ly(iris, x = ~Petal.Length, y = ~Petal.Width, color = ~as.ordered(Species), mode = &quot;markers&quot;) In the case of continuous numeric variables, plot_ly() performs a linear mapping between the data and an interpolated color pallette. plot_ly(iris, x = ~Petal.Length, y = ~Petal.Width, color = ~Sepal.Length, mode = &quot;markers&quot;) The colors argument takes arbitrary color codes of arbitrary length. Here is how we could use it to replicate the default mapping in ggplot2. plot_ly(iris, x = ~Petal.Length, y = ~Petal.Width, color = ~Sepal.Length, colors = c(&quot;#132B43&quot;, &quot;#56B1F7&quot;), mode = &quot;markers&quot;) 2.3.1.3 Diverging color mappings To obtain a diverging color mapping, just provide a diverging palette to the colors argument. plot_ly(iris, x = ~Petal.Length, y = ~Petal.Width, color = ~Sepal.Length, colors = &quot;PuOr&quot;, mode = &quot;markers&quot;) 2.3.2 The symbol argument To encode values using symbols, use the symbol argument. plot_ly(iris, x = ~Petal.Length, y = ~Petal.Width, symbol = ~Species, mode = &quot;markers&quot;) To change the default symbols used, use the symbols argument. All the valid symbol types are listed here. plot_ly(iris, x = ~Petal.Length, y = ~Petal.Width, mode = &quot;markers&quot;, symbol = ~Species, symbols = c(&quot;cross&quot;, &quot;square&quot;, &quot;triangle-down&quot;)) -->"],
["subplot.html", "3 The subplot() function", " 3 The subplot() function The subplot() function provides a flexible interface for arranging multiple plotly plots in a single view. The simplest way to use it is to pass plotly visualizations directly to subplot(). library(plotly) p1 &lt;- plot_ly(economics, x = ~date, y = ~unemploy, name = &quot;unemploy&quot;) p2 &lt;- plot_ly(economics, x = ~date, y = ~uempmed, name = &quot;uempmed&quot;) subplot(p1, p2) Although subplot() accepts an arbitrary number of plot objects, passing a list of plots can save typing and redundant code when dealing with a large number of plots. To demonstrate, let’s create one time series for each variable in the economics dataset and share the x-axis so that zoom/pan events are synchronized across each series: vars &lt;- setdiff(names(economics), &quot;date&quot;) plots &lt;- lapply(vars, function(var) { plot_ly(x = economics$date, y = economics[[var]], name = var) }) subplot(plots, nrows = length(plots), shareX = TRUE, titleX = FALSE) Conceptually, subplot() provides a way to place a collection of plots into a table with a given number of rows and columns. The number of rows (and, by consequence, the number of columns) is specified via the nrows argument. By default each row/column shares an equal proportion of the overall height/width, but as shown in the diagram below, that default can be changed via the heights and widths arguments. This flexibility is quite useful for a number of visualizations, for example, a joint density plot (the new heatmaply package is another good example). x &lt;- rnorm(100) y &lt;- rnorm(100) m &lt;- list(color = &quot;black&quot;) s &lt;- subplot( plot_ly(x = x, type = &quot;histogram&quot;, marker = m), plotly_empty(), plot_ly(x = x, y = y, mode = &quot;markers&quot;, marker = m), plot_ly(y = y, type = &quot;histogram&quot;, marker = m), nrows = 2, heights = c(0.2, 0.8), widths = c(0.8, 0.2), shareX = TRUE, shareY = TRUE, titleX = FALSE, titleY = FALSE ) layout(s, showlegend = FALSE) Note that, since subplot() returns a plotly object, any layout attribute can be modified downstream via layout(). "],
["recursive-subplots.html", "3.1 Recursive subplots", " 3.1 Recursive subplots The subplot() function is designed to work recursively so that you can have subplots of subplots. This idea is useful when your desired layout doesn’t conform to the table structure described in the previous section. In fact, you can think of a subplot of subplots like a spreadsheet with merged cells. plotList &lt;- function(nplots) { # TODO: use new images infrastructure to overlay an R image on each plot lapply(seq_len(nplots), function(x) plot_ly()) } s1 &lt;- subplot(plotList(6), nrows = 2, shareX = TRUE, shareY = TRUE) s2 &lt;- subplot(plotList(2), shareY = TRUE) subplot(s1, s2, plot_ly(), nrows = 3, margin = 0.04, heights = c(0.6, 0.3, 0.1)) The concept is particularly useful when you want plot(s) in a given row to have different widths from plot(s) in another row. # specify some map projection/options g &lt;- list( scope = &#39;usa&#39;, projection = list(type = &#39;albers usa&#39;), lakecolor = toRGB(&#39;white&#39;) ) # create a map of population density density &lt;- state.x77[, &quot;Population&quot;] / state.x77[, &quot;Area&quot;] map &lt;- plot_ly( z = ~density, text = state.name, locations = state.abb, type = &#39;choropleth&#39;, locationmode = &#39;USA-states&#39;, geo = &quot;geo&quot; ) %&gt;% layout(geo = g) # create a bunch of horizontal bar charts vars &lt;- colnames(state.x77) barcharts &lt;- lapply(vars, function(var) { plot_ly(x = state.x77[, var], y = state.name, type = &quot;bar&quot;, orientation = &quot;h&quot;, name = var) %&gt;% layout(showlegend = FALSE, hovermode = &quot;y&quot;, yaxis = list(showticklabels = FALSE)) }) subplot( subplot(barcharts, margin = 0.01), map, nrows = 2, heights = c(0.3, 0.7) ) "],
["ggplot2-subplots.html", "3.2 ggplot2 subplots", " 3.2 ggplot2 subplots The subplot() function also understands ggplot2 objects, and converts them to an interactive web-based version via ggplotly() before arranging them in the final layout. e &lt;- tidyr::gather(economics, variable, value, -date) gg1 &lt;- ggplot(e, aes(date, value)) + geom_line() + facet_wrap(~variable, scales = &quot;free_y&quot;, ncol = 1) gg2 &lt;- ggplot(e, aes(factor(1), value)) + geom_violin() + facet_wrap(~variable, scales = &quot;free_y&quot;, ncol = 1) + theme(axis.text = element_blank(), axis.ticks = element_blank()) subplot(gg1, gg2) %&gt;% layout(margin = list(l = 50)) This infrastructure allows ggplotly() to understand ggmatrix objects – the class of object returned by the ggpairs() function in the GGally package. pm &lt;- GGally::ggpairs(iris) ggplotly(pm) -->"],
["advanced-interactive-techniques.html", "4 Advanced interactive techniques", " 4 Advanced interactive techniques The code is this section is still under development and is likely to change. To run any of the code you see in this section, you’ll need this developmental version of the package: devtools::install_github(“ropensci/plotly#554”) As discussed in previous chapters, plotly graphs have zoom, pan, and identification type interactions enabled by default. This chapter will discuss ways we can enable other types of useful interactions listed in Table 4.1. Table 4.1: A taxonomy of interaction types Technique Related Questions Examples Identification What is this point/mark? Hover for additional info Zoom &amp; pan Is there local structure that can’t be viewed globally? Click &amp; drag to alter x/y axis limits Animation How does a distribution change over time? How does a fitted model look when projected into high-dimensional space? The grand tour Linked highlighting How does the marginal/joint compare to a conditional? Linked brushing on a scatterplot matrix Filter How does this subset compare to another? What happened during this time period? Click on legend entries shiny::selectInput() / shiny::sliderInput() "],
["highlighting.html", "4.1 Highlighting", " 4.1 Highlighting TODO: talk about how this improves the example in the first chapter library(plotly) library(crosstalk) d &lt;- SharedData$new(txhousing, ~city) p &lt;- ggplot(d, aes(date, median, group = city)) + geom_line(geom = &quot;line&quot;) ggplotly(p, tooltip = &quot;city&quot;) %&gt;% highlight(on = &quot;plotly_hover&quot;, color = &quot;red&quot;) TODO: Talk about the convenience of having “standard” events generated across chart types. When working with something like D3, you typically have to bind to DOM elements when attaching listeners, which does not generalize well. "],
["linked-highlighting.html", "4.2 Linked highlighting", " 4.2 Linked highlighting TODO: show 06-plotly-pipeline.R example. Explain the importance of the pipeline. "],
["current-limitations.html", "4.3 Current limitations", " 4.3 Current limitations Currently not working with filled polygons (TODO: is this still true?) – https://github.com/plotly/plotly.js/issues/884 Currently not working with gl2d – https://github.com/plotly/plotly.js/issues/886 Currently leaflet is the only htmlwidget, with crosstalk support, that will respect non-default arguments in plotly’s highlight() function. -->"],
["animation.html", "5 Animation", " 5 Animation TODO: implement this! Do an example with touring "],
["shiny.html", "6 shiny", " 6 shiny "],
["accessing-plotly-js-events-in-r-without-shiny.html", "7 Accessing plotly.js events in R, without shiny", " 7 Accessing plotly.js events in R, without shiny Accessing plotly.js events in shiny is easy (for example), but shiny adds a lot of additional infrastructure that makes it hard to share your work, especially at scale. Very soon, plotly R users will have ways to perform highlighting and linked highlighting without shiny or any knowledge of HTML/JavaScript. However, if you do know some JavaScript, you can access (and respond to) plotly.js events without shiny, without having to leave the comfort of your R prompt, thanks to the onRender() function from the htmlwidgets package (Vaidyanathan et al. 2016). This function allows you to write a JavaScript function which will be invoked on the htmlwidget object after it is done rendering. This JavaScript function should have at least two arguments: (1) the DOM element containing the htmlwidget (el) and (2) the data passed from R (x). Here we use the onRender() function to send “event data” to the browser’s console upon hovering a point. library(plotly) library(htmlwidgets) plot_ly(mtcars, x = ~wt, y = ~mpg) %&gt;% onRender(&quot; function(el, x) { var gd = document.getElementById(el.id); gd.on(&#39;plotly_hover&#39;, function(pt) { console.log(&#39;hover&#39;, pt); }); } &quot;) References "],
["plotly-interface-internals.html", "8 plotly interface internals", " 8 plotly interface internals This chapter describes some of the internals of the plotly package – specifically how it interfaces with the plotly.js graphing library. The plotly.js library (as with many other JavaScript graphing libraries) strives to describe any plot through a plot specification defined via JavaScript Object Notation (JSON). JSON is a language independent data-interchange format that was originally designed for JavaScript, but parsers for many different languages now exist, including R (Temple Lang 2014); (Ooms 2014). JSON is a recursive key-value data structure (similar to a list in R), and essentially any valid JavaScript value has a natural R equivalent (e.g., NULL/null). As a result, any JSON object can be created from an appropriate R list, meaning that theoretically any plotly.js plot can be described via an R list. The idea of interfacing R with JavaScript libraries via JSON data transfer has been popular way for quite some time (Vaidyanathan 2013); (???); (T. D. Hocking, VanderPlas, and Sievert 2015). The R package htmlwidgets standardized this bridge, and provides some additional infrastructure for making sure the HTML output works as expected in multiple contexts (in the R console or RStudio, within rmarkdown documents, and embedded inside shiny apps). The htmlwidgets also provides ways for both widget authors and users to extend the functionality of the underlying JavaScript library. In fact, the plotly package uses this mechanism to extend the plotly.js graphing library and enable all the material in Advanced interactive techniques. References "],
["ensuring-type-safety-in-data-transfer.html", "8.1 Ensuring type safety in data transfer", " 8.1 Ensuring type safety in data transfer TODO: talk about using plotly.js plot schema for ensuring type safety, and throwing informative messages… "],
["plotly-object-representation.html", "8.2 plotly object representation", " 8.2 plotly object representation Inherits from an htmlwidget object Lazy evaluation of arguments "],
["miscellanous.html", "8.3 Miscellanous", " 8.3 Miscellanous Importance of generic functions for an extensible interface -->"],
["extending-ggplotly-and-plotly.html", "9 Extending ggplotly and plotly ", " 9 Extending ggplotly and plotly "],
["converting-custom-geoms.html", "9.1 Converting custom geoms", " 9.1 Converting custom geoms https://github.com/hrbrmstr/ggalt https://github.com/haleyjeppson/geom_mosaic "],
["wrappers-for-domain-specific-viz.html", "9.2 Wrappers for domain-specific viz", " 9.2 Wrappers for domain-specific viz https://github.com/talgalili/heatmaply https://github.com/natydasilva/PPforest "]
]
