[
["index.html", "plotly for R Overview", " plotly for R Carson Sievert Overview This website explains and partially documents the R package plotly, a high-level interface to the open source JavaScript graphing library plotly.js (which powers plot.ly). The R package already has numerous examples and documentation on https://plot.ly/r and https://plot.ly/ggplot2, but this website provides more of a cohesive narrative to help explain fundamental concepts and recent developments. By reading from start to finish, readers new to R and plotly should be able to get up and running fairly quickly. That being said, advanced R and plotly users should still find the majority of this material useful and informative. I highly recommend copying/pasting examples into your R console, and modifying them as you read along, to aid the learning process. This work is licensed under the Creative Commons Attribution-NonCommercial-NoDerivs 3.0 United States License. "],
["installation.html", "Installation", " Installation If you have R installed, you can install the stable release of plotly by typing this in your R console: install.packages(&quot;plotly&quot;) Or you can install the development release via the devtools package: if (!require(&quot;devtools&quot;)) install.packages(&quot;devtools&quot;) devtools::install_github(&quot;ropensci/plotly&quot;) The version of the R package used to build this site is: packageVersion(&quot;plotly&quot;) #&gt; [1] &#39;4.4.5&#39; "],
["get-started.html", "Get started", " Get started To ensure plotly is installed correctly, try loading the package and creating this example by pasting the code inside your R console. library(plotly) plot_ly(z = ~volcano) plotly uses the htmlwidget framework, which allows plots to work seamlessly and consistently in various contexts (e.g., R Markdown documents, shiny apps, inside RStudio, or any other R command prompt) without an internet connection. IPython/Jupyter notebook users should wrap plots with the embed_notebook() function to embed them inline inside a notebook. "],
["plot-ly-for-collaboration.html", "plot.ly for collaboration", " plot.ly for collaboration plot.ly subscribers can use plotly_POST() function to publish plots onto plotly’s web platform. This platform makes it very easy to host/share your graphs, collaborate with others, and is free to use for public graphs (have a look at our pricing options if you need privacy or customer support). Once a plot is hosted on your account, others may copy/fork your graph to their account (given the right permissions) using a friendly user-interface. As long as you can view a plot hosted on http://plot.ly, you can obtain the data behind with plot via the get_figure() function. This makes it easy to access and modify plots created with any plotly.js interface (e.g., Python, MATLAB, Julia, Scala, etc) from your R console. Not only is this web-based user-interface to plotly.js useful for collaborating with others, but it is also useful for completing tasks that are cumbersome to do at the command-line. For instance, annotations can be added to any plot via a point-and-click interface: -->"],
["two-approaches-one-object.html", "1 Two approaches, one object", " 1 Two approaches, one object There are two main ways to initiate a plotly object in R. The plot_ly() function transforms data into a plotly object, while the ggplotly() function transforms a ggplot object into a plotly object (Wickham 2009); (Sievert et al. 2016). Regardless how plotly object is created, printing it results in an interactive web-based visualization with tooltips, zooming, and panning enabled by default. It is also possible to enable more advanced interactive techniques, such as animation and linked highlighting. This chapter discusses some of the philosophy behind each approach, explores some of their similarities, and explains why understanding both approaches is extremely powerful. The initial inspiration for the plot_ly() function was to support plotly.js chart types that ggplot2 doesn’t support, such as 3D surface and mesh plots. Over time, this effort snowballed into an interface to the entire plotly.js graphing library with additional abstractions inspired by the grammar of graphics (Wilkinson 2005). This newer “non-ggplot2” interface to plotly.js is currently not, and may never be, as fully featured as ggplot2. Since we can already translate a fairly large amount of ggplot objects to plotly objects, I’d rather not reinvent those same abstractions, and focus providing useful tools for advanced interactive graphics. The next section uses a case study to introduce some of the similarities between ggplotly() and plot_ly(), dives into the cognitive framework behind plot_ly(), and also demonstrates how to extend ggplotly() with functions that can modify plotly objects. "],
["a-case-study-of-housing-sales-in-texas.html", "1.1 A case study of housing sales in Texas", " 1.1 A case study of housing sales in Texas The plotly package depends on ggplot2 which bundles a data set on monthly housing sales in Texan cities acquired from the TAMU real estate center. After the loading the package, the data is “lazily loaded” into your session, so you may reference it by name: library(plotly) txhousing #&gt; # A tibble: 8,602 × 9 #&gt; city year month sales volume median listings inventory date #&gt; &lt;chr&gt; &lt;int&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; #&gt; 1 Abilene 2000 1 72 5380000 71400 701 6.3 2000 #&gt; 2 Abilene 2000 2 98 6505000 58700 746 6.6 2000 #&gt; 3 Abilene 2000 3 130 9285000 58100 784 6.8 2000 #&gt; 4 Abilene 2000 4 98 9730000 68600 785 6.9 2000 #&gt; 5 Abilene 2000 5 141 10590000 67300 794 6.8 2000 #&gt; 6 Abilene 2000 6 156 13910000 66900 780 6.6 2000 #&gt; # ... with 8,596 more rows In attempt to understand house price behavior over time, we could plot date on x, median on y, and group the lines connecting these x/y pairs by city. Using ggplot2, we can initiate a ggplot object with the ggplot() function which accepts a data frame and a mapping from data variables to visual aesthetics. By just initiating the object, ggplot2 won’t know how to geometrically represent the mapping until we add a layer to the plot via one of geom_*() (or stat_*()) functions (in this case, we want geom_line()). In this case, it is also a good idea to specify alpha transparency so that 5 lines plotted on top of each other appear as solid black, to help avoid overplotting. If you’re new to ggplot2, the ggplot2 cheatsheet provides a nice quick overview. The online docs or R graphics cookbook are helpful for learning by example, and the ggplot2 book provides a nice overview of the conceptual underpinnings. p &lt;- ggplot(txhousing, aes(date, median)) + geom_line(aes(group = city), alpha = 0.2) 1.1.1 The ggplotly() function Now that we have a valid ggplot2 object, p, the plotly package provides the ggplotly() function which converts a ggplot object to a plotly object. By default, it supplies the entire aesthetic mapping to the tooltip, but the tooltip argument provides a way to restrict tooltip info to a subset of that mapping. Furthermore, in cases where the statistic of a layer is something other than the identity function (e.g., geom_bin2d() and geom_hex()), relevant “intermediate” variables generated in the process are also supplied to the tooltip. This provides a nice mechanism for decoding visual aesthetics (e.g., color) used to represent a measure of interest (e.g, count/value). In Figure ??, the subplot() function from the plotly package (discussed in more detail in subplots), which accepts a collection of ggplot and/or plotly objects, helps to concisely display tooltips for a number of scenarios, and how to suppress them. subplot( p, ggplotly(p, tooltip = &quot;city&quot;), ggplot(txhousing, aes(date, median)) + geom_bin2d(), ggplot(txhousing, aes(date, median)) + geom_hex(), nrows = 2, shareX = TRUE, shareY = TRUE, titleY = FALSE, titleX = FALSE ) Although ggplot2 does not have a text aesthetic, the ggplotly() function recognizes this aesthetic and displays it in the tooltip by default. In addition to providing a way to supply “meta” information, it also provides a way to customize your tooltips (do this by restricting the tooltip to the text aesthetic – ggplotly(p, tooltip = “text”)) The ggplotly() function translates most things that you can do in ggplot2, but not quite everything. To help demonstrate the coverage, I’ve built a plotly version of the ggplot2 docs. This version of the docs displays the ggplotly() version of each plot in a static form (to reduce page loading time), but you can click any plot to view its interactive version. The next section deomnstrates how to create plotly.js visualizations via the R package, without ggplot2, via the plot_ly() interface. We’ll then leverage those concepts to extend ggplotly(). 1.1.2 The plot_ly() interface 1.1.2.1 The Layered Grammar of Graphics The cognitive framework underlying the plot_ly() interface draw inspiration from the layered grammar of graphics (Wickham 2010), but in contrast to ggplotly(), it provides a more flexible and direct interface to plotly.js. It is more direct in the sense that it doesn’t call ggplot2’s sometimes expensive plot building routines, and it is more flexible in the sense that data frames are not required, which is useful for visualizing matrices, as shown in Get Started. Although data frames are not required, it is recommended to use them whenever possible, especially when constructing a plot with multiple layers or groups. When a data frame is associated with a plotly object, it allows us to manipulate the data underlying that object in the same way we would directly manipulate the data. Currently, plot_ly() borrows semantics from and provides special plotly methods for generic functions in the dplyr and tidyr packages (Wickham and Francois 2016); (Wickham 2016). Most importantly, plot_ly() recognizes and preserves groupings created with dplyr’s group_by() function. library(dplyr) tx &lt;- group_by(txhousing, city) # initiate a plotly object with date on x and median on y p &lt;- plot_ly(tx, x = ~date, y = ~median) # plotly_data() returns data associated with a plotly object, note the group attribute! plotly_data(p) #&gt; Source: local data frame [8,602 x 9] #&gt; Groups: city [46] #&gt; #&gt; city year month sales volume median listings inventory date #&gt; &lt;chr&gt; &lt;int&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; #&gt; 1 Abilene 2000 1 72 5380000 71400 701 6.3 2000 #&gt; 2 Abilene 2000 2 98 6505000 58700 746 6.6 2000 #&gt; 3 Abilene 2000 3 130 9285000 58100 784 6.8 2000 #&gt; 4 Abilene 2000 4 98 9730000 68600 785 6.9 2000 #&gt; 5 Abilene 2000 5 141 10590000 67300 794 6.8 2000 #&gt; 6 Abilene 2000 6 156 13910000 66900 780 6.6 2000 #&gt; # ... with 8,596 more rows Defining groups in this fashion ensures plot_ly() will produce at least one graphical mark per group.1 So far we’ve specified x/y attributes in the plotly object p, but we have not yet specified the geometric relation between these x/y pairs. Similar to geom_line() in ggplot2, the add_lines() function connects (a group of) x/y pairs with lines in the order of their x values, which is useful when plotting time series as shown in Figure ??. # add a line highlighting houston add_lines( # plots one line per city since p knows city is a grouping variable add_lines(p, alpha = 0.2, name = &quot;Texan Cities&quot;, hoverinfo = &quot;none&quot;), name = &quot;Houston&quot;, data = filter(txhousing, city == &quot;Houston&quot;) ) The plotly package has a collection of add_*() functions, all of which inherit attributes defined in plot_ly(). These functions also inherit the data associated with the plotly object provided as input, unless otherwise specified with the data argument. I prefer to think about add_*() functions like a layer in ggplot2, which is slightly different, but related to a plotly.js trace. In Figure ??, there is a 1-to-1 correspondence between layers and traces, but add_*() functions do generate numerous traces whenever mapping a discrete variable to a visual aesthetic (e.g., color). In this case, since each call to add_lines() generates a single trace, it makes sense to name the trace, so a sensible legend entry is created. In the first layer of Figure ??, there is one line per city, but all these lines belong a single trace. We could have produced one trace for each line, but this is way more computationally expensive because, among other things, each trace produces a legend entry and tries to display meaningful hover information. It is much more efficient to render this layer as a single trace with missing values to differentiate groups. In fact, this is exactly how the group aesthetic is translated in ggplotly(); otherwise, layers with many groups (e.g., geom_map()) would be slow to render. 1.1.2.2 The data-plot-pipeline Since every plotly function modifies a plotly object (or the data underlying that object), we can express complex multi-layer plots as a sequence (or, more specifically, a directed acyclic graph) of data manipulations and mappings to the visual space. Moreover, plotly functions are designed to take a plotly object as input, and return a modified plotly object, making it easy to chain together operations via the pipe operator (%&gt;%) from the magrittr package (Bache and Wickham 2014). Consequently, we can re-express Figure ?? in a much more readable and understandable fashion. allCities &lt;- txhousing %&gt;% group_by(city) %&gt;% plot_ly(x = ~date, y = ~median) %&gt;% add_lines(alpha = 0.2, name = &quot;Texan Cities&quot;, hoverinfo = &quot;none&quot;) allCities %&gt;% filter(city == &quot;Houston&quot;) %&gt;% add_lines(name = &quot;Houston&quot;) Sometimes the directed acyclic graph property of a pipeline can be too restrictive for certain types of plots. In this example, after filtering the data down to Houston, there is no way to recover the original data inside the pipeline. The add_fun() function helps to work-around this restriction2 – it works by applying a function to the plotly object, but does not affect the data associated with the plotly object. This effectively provides a way to isolate data transformations within the pipeline3. Figure ?? uses this idea to highlight both Houston and San Antonio. allCities %&gt;% add_fun(function(plot) { plot %&gt;% filter(city == &quot;Houston&quot;) %&gt;% add_lines(name = &quot;Houston&quot;) }) %&gt;% add_fun(function(plot) { plot %&gt;% filter(city == &quot;San Antonio&quot;) %&gt;% add_lines(name = &quot;San Antonio&quot;) }) It is useful to think of the function supplied to add_fun() as a “layer” function – a function that accepts a plot object as input, possibly applies a transformation to the data, and maps that data to visual objects. To make layering functions more modular, flexible, and expressive, the add_fun() allows you to pass additional arguments to a layer function. Figure ?? makes use of this pattern, by creating a reusable function for layering both a particular city as well as the first, second, and third quartile of median monthly house sales (by city). # reusable function for highlighting a particular city layer_city &lt;- function(plot, name) { plot %&gt;% filter(city == name) %&gt;% add_lines(name = name) } # reusable function for plotting overall median &amp; IQR layer_iqr &lt;- function(plot) { plot %&gt;% group_by(date) %&gt;% summarise( q1 = quantile(median, 0.25, na.rm = TRUE), m = median(median, na.rm = TRUE), q3 = quantile(median, 0.75, na.rm = TRUE) ) %&gt;% add_lines(y = ~m, name = &quot;median&quot;, color = I(&quot;black&quot;)) %&gt;% add_ribbons(ymin = ~q1, ymax = ~q3, name = &quot;IQR&quot;, color = I(&quot;black&quot;)) } allCities %&gt;% add_fun(layer_iqr) %&gt;% add_fun(layer_city, &quot;Houston&quot;) %&gt;% add_fun(layer_city, &quot;San Antonio&quot;) A layering function does not have to be a data-plot-pipeline itself. Its only requirement on a layering function is that the first argument is a plot object and it returns a plot object. This provides an opportunity to say, fit a model to the plot data, extract the model components you desire, and map those components to visuals. Furthermore, since plotly’s add_*() functions don’t require a data.frame, you can supply those components directly to attributes (as long as they are well-defined), as done in Figure ?? via the forecast package (Hyndman, n.d.). library(forecast) layer_forecast &lt;- function(plot) { d &lt;- plotly_data(plot) series &lt;- with(d, ts(median, frequency = 12, start = c(2000, 1), end = c(2015, 7)) ) fore &lt;- forecast(ets(series), h = 48, level = c(80, 95)) plot %&gt;% add_ribbons(x = time(fore$mean), ymin = fore$lower[, 2], ymax = fore$upper[, 2], color = I(&quot;gray95&quot;), name = &quot;95% confidence&quot;, inherit = FALSE) %&gt;% add_ribbons(x = time(fore$mean), ymin = fore$lower[, 1], ymax = fore$upper[, 1], color = I(&quot;gray80&quot;), name = &quot;80% confidence&quot;, inherit = FALSE) %&gt;% add_lines(x = time(fore$mean), y = fore$mean, color = I(&quot;blue&quot;), name = &quot;prediction&quot;) } txhousing %&gt;% group_by(city) %&gt;% plot_ly(x = ~date, y = ~median) %&gt;% add_lines(alpha = 0.2, name = &quot;Texan Cities&quot;, hoverinfo = &quot;none&quot;) %&gt;% add_fun(layer_iqr) %&gt;% add_fun(layer_forecast) In summary, the “data-plot-pipeline” is desirable for a number of reasons: (1) makes your code easier to read and understand, (2) encourages you to think of both your data and plots using a single, uniform data structure, which (3) makes it easy to combine and reuse different pipelines, and (4) provides a natural mechanism for implementing the pipeline(s) necessary in interactive graphics system with support for Linked Highlighting (Wickham et al. 2010). As it turns out, we can even use these ideas when creating a plotly object via ggplotly(), as discused in the next section Extending ggplotly(). In practice, it’s easy to forget about “lingering” groups (e.g., mtcars %&gt;% group_by(vs, am) %&gt;% summarise(s = sum(mpg))), so in some cases, you may need to ungroup() your data before plotting it.↩ Credit to Winston Chang and Hadley Wickham for this idea. The add_fun() is very much like layer_f() function in ggvis.↩ Also, effectively putting a pipeline inside a pipeline↩ "],
["extending-ggplotly.html", "1.2 Extending ggplotly()", " 1.2 Extending ggplotly() 1.2.1 Customizing the layout Since the ggplotly() function returns a plotly object, we can manipulate that object in the same way that we would manipulate an object created with plot_ly(). A simple and obviously useful application of this is to specify interaction modes, like plotly.js’ layout.hovermode. p &lt;- ggplot(fortify(gold), aes(x, y)) + geom_line() gg &lt;- ggplotly(p) layout(gg, hovermode = &quot;x&quot;) We can also easily add a range slider to the x-axis, which allows you to zoom on the x-axis, without losing the global context. This is quite useful for quickly altering the limits of your plot to achieve an optimal aspect ratio for your data (William S. Cleveland 1988), without losing the global perspective. rangeslider(gg) Since a single plotly object can only have one layout, modifying the layout of ggplotly() is fairly easy, but it’s trickier to add and modify layers. 1.2.2 Adding layers Since ggplotly() returns a plotly object, and plotly objects have data associated with them, we can effectively associate data from a ggplot object with a plotly object, before or after summary statistics have been applied. Since each ggplot layer owns a data frame, it is useful to have some way to specify the particular layer of data of interest, which is the point of the layerData argument in ggplotly(). Also, when a particular layer applies a summary statistic (e.g., geom_bin()), or applies a model (e.g., geom_smooth()) to the data, it might be useful to access the output of that transformation, which is the point of the originalData argument in ggplotly(). p &lt;- ggplot(mtcars, aes(x = wt, y = mpg)) + geom_point() + geom_smooth() p %&gt;% ggplotly(layerData = 2, originalData = FALSE) %&gt;% plotly_data() #&gt; # A tibble: 80 × 13 #&gt; x y ymin ymax se PANEL group colour fill size linetype #&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;int&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; #&gt; 1 1.51 32.1 28.1 36.0 1.92 1 -1 #3366FF grey60 1 1 #&gt; 2 1.56 31.7 28.2 35.2 1.72 1 -1 #3366FF grey60 1 1 #&gt; 3 1.61 31.3 28.1 34.5 1.54 1 -1 #3366FF grey60 1 1 #&gt; 4 1.66 30.9 28.0 33.7 1.39 1 -1 #3366FF grey60 1 1 #&gt; 5 1.71 30.5 27.9 33.0 1.26 1 -1 #3366FF grey60 1 1 #&gt; 6 1.76 30.0 27.7 32.4 1.16 1 -1 #3366FF grey60 1 1 #&gt; # ... with 74 more rows, and 2 more variables: weight &lt;dbl&gt;, alpha &lt;dbl&gt; This is the dataset ggplot2 uses to actually draw the fitted values (as a line) and standard error bounds (as a ribbon). Figure ?? uses this data to add additional information about the model fit; in particular, it adds a vertical lines and annotations at the x-values that are associated with the highest and lowest amount uncertainty in y. p %&gt;% ggplotly(layerData = 2, originalData = F) %&gt;% add_fun(function(p) { p %&gt;% slice(which.max(se)) %&gt;% add_segments(x = ~x, xend = ~x, y = ~ymin, yend = ~ymax) %&gt;% add_annotations(&quot;Maximum uncertainty&quot;, ax = 60) }) %&gt;% add_fun(function(p) { p %&gt;% slice(which.min(se)) %&gt;% add_segments(x = ~x, xend = ~x, y = ~ymin, yend = ~ymax) %&gt;% add_annotations(&quot;Minimum uncertainty&quot;) }) Although it is not used in this example, it worth noting that when adding plotly layers to the output of ggplotly(), it will inherit the global mapping by default, which may or may not be desired, but the inherit argument in any of the add_*() functions may be set to FALSE to avoid this behavoir. 1.2.3 Modifying layers As mentioned previously, ggplotly() translates each ggplot2 layer into one or more plotly.js traces. In this translation, it is forced to make a number of assumptions about trace attribute values that may or may not be appropriate for the use case. The style() function is useful in this scenario, as it provides a way to modify trace attribute values in a plotly object. Before using it, you may want to inspect the actual traces in a given plotly object using the plotly_json() function. This function uses the listviewer package to display a convenient interactive view of the JSON object sent to plotly.js (de Jong and Russell 2016). By clicking on the arrow next to the data element, you can see the traces (data) behind the plot. In this case, we have three traces: one for the geom_point() layer and two for the geom_smooth() layer. plotly_json(p) Say, for example, we’d like to display information when hovering over points, but not when hovering over the fitted values or error bounds. The ggplot2 API has no semantics for making this distinction, but this is easily done in plotly.js by setting the hoverinfo attribute to &quot;none&quot;. Since the fitted values or error bounds are contained in the second and third traces, we can hide the information on just these traces using the traces attribute in the style() function: style(p, hoverinfo = &quot;none&quot;, traces = 2:3) "],
["choosing-an-interface.html", "1.3 Choosing an interface", " 1.3 Choosing an interface ggplot2 requires data frame(s) and can be inefficient (especially for time series). ggplot2 does not have a functional interface (making it awkward to combine with modern functional interfaces such as dplyr), and does not satisfy referential transparency (making it easier to program with – for more details, see ) ggplotly() tries to replicate exactly what you see in the corresponding static ggplot2 graph. To do so, it sends axis tick information to plotly as tickvals/ticktext properties, and consequently, axis ticks do not update on zoom events. ggplot2’s interface wasn’t designed for interactive graphics. Directly extending the grammar to support more advanced types of interaction (e.g., linked brushing) is a risky endeavor. -->"],
["the-plotly-cookbook.html", "2 The plotly cookbook", " 2 The plotly cookbook This chapter demonstrates the capabilities of plot_ly() through a series of examples. The plot_ly() function does provide a direct interface to plotly.js, so anything in the figure reference can be specified via plot_ly(), but this chapter will focus more on the semantics unique to the R package that can’t be found on the figure reference. Along the way, we will touch on some best practices in visualization. "],
["scatter-traces.html", "2.1 Scatter traces", " 2.1 Scatter traces A plotly visualization is composed of one (or more) trace(s), and every trace has a type. The default trace type, “scatter”, can be used to draw a large amount of geometries, and actually powers many of the add_*() functions such as add_markers(), add_lines(), add_paths(), add_segments(), add_ribbons(), and add_polygons(). These functions make assumptions about the mode of the scatter trace (among other things), but any of the attributes listed under the scatter section of the figure reference may be passed to these functions. 2.1.1 Scatterplots The scatterplot is useful for visualizing the correlation between two quantitative variables. If you supply a numeric vector for x and y in plot_ly(), it defaults to a scatterplot, but you can also be explicit about adding a layer of markers/points via the add_markers() function. A common problem with scatterplots is overplotting, meaning that there are multiple observations occupying the same (or similar) x/y locations. There are a few ways to combat overplotting including: alpha transparency, hollow symbols, and 2D density estimation. Figure ?? shows three versions of a basic scatterplot: subplot( plot_ly(mpg, x = ~cty, y = ~hwy, name = &quot;default&quot;), plot_ly(mpg, x = ~cty, y = ~hwy) %&gt;% add_markers(alpha = 0.2, name = &quot;alpha&quot;), plot_ly(mpg, x = ~cty, y = ~hwy) %&gt;% add_markers(symbol = I(1), name = &quot;hollow&quot;) ) In Figure ??, hollow circles are specified via symbol = I(1). By default, the symbol argument (as well as the color/size/linetype arguments) assumes value(s) are “data”, which need to be mapped to a visual palette (provided by symbols). Wrapping values with the I() function notifies plot_ly() that these values should be taken “AsIs”. If you compare the result of plot(1:25, 1:25, pch = 1:25) to Figure ??, you’ll see that plot_ly() can translate R’s plotting characters (pch), but you can also use plotly.js’ symbol syntax, if you desire. subplot( plot_ly(x = 1:25, y = 1:25, symbol = I(1:25), name = &quot;pch&quot;), plot_ly(mpg, x = ~cty, y = ~hwy, symbol = ~cyl, symbols = 1:3, name = &quot;cyl&quot;) ) When mapping a numeric variable to symbol, it creates only one trace, so no legend is generated. If you do want one trace per symbol, make sure the variable you’re mapping is a factor, as Figure ?? demonstrates. When plotting multiple traces, the default plotly.js color scale will apply, but you can set the color of every trace generated from this layer with color = I(&quot;black&quot;), or similar. p &lt;- plot_ly(mpg, x = ~cty, y = ~hwy, alpha = 0.3) subplot( add_markers(p, symbol = ~cyl, name = &quot;A single trace&quot;), add_markers(p, symbol = ~factor(cyl), color = I(&quot;black&quot;)) ) The color argument adheres to similar rules as symbol: If numeric, color produces one trace, but colorbar is also generated to aide the decoding of colors back to data values. The colorbar() function can be used to customize the appearance of this automatically generated guide. The default colorscale is viridis, a perceptually-uniform colorscale (even when converted to black-and-white), and perceivable even to those with common forms of color blindness (Data Science 2016). If discrete, color produces one trace per value, meaning a legend is generated. If an ordered factor, the default colorscale is viridis (Garnier 2016); otherwise, it is the “Set2” palette from the RColorBrewer package (Neuwirth 2014) p &lt;- plot_ly(mpg, x = ~cty, y = ~hwy, alpha = 0.5) subplot( add_markers(p, color = ~cyl, showlegend = FALSE) %&gt;% colorbar(title = &quot;Viridis&quot;, len = 1/2, y = 1), add_markers(p, color = ~factor(cyl)) ) %&gt;% layout(showlegend = TRUE) There are a number of ways to alter the default colorscale via the colors argument. This argument excepts: (1) a color brewer palette name (see the row names of RColorBrewer::brewer.pal.info for valid names), (2) a vector of colors to interpolate, or (3) a color interpolation function like colorRamp() or scales::colour_ramp(). Although this grants a lot of flexibility, one should be concious of using a sequential colorscale for numeric variables (&amp; ordered factors) as shown in ??, and a qualitative colorscale for discrete variables as shown in ??. (TODO: touch on lurking variables?) subplot( add_markers(p, color = ~cyl, colors = c(&quot;#132B43&quot;, &quot;#56B1F7&quot;)) %&gt;% colorbar(title = &quot;ggplot2 default&quot;, len = 1/3, y = 1), add_markers(p, color = ~cyl, colors = viridisLite::inferno(10)) %&gt;% colorbar(title = &quot;Inferno&quot;, len = 1/3, y = 2/3), add_markers(p, color = ~cyl, colors = colorRamp(c(&quot;red&quot;, &quot;white&quot;, &quot;blue&quot;))) %&gt;% colorbar(title = &quot;colorRamp&quot;, len = 1/3, y = 1/3) ) subplot( add_markers(p, color = ~factor(cyl), colors = &quot;Pastel1&quot;), add_markers(p, color = ~factor(cyl), colors = colorRamp(c(&quot;red&quot;, &quot;blue&quot;))), add_markers(p, color = ~factor(cyl), colors = c(`4` = &quot;red&quot;, `5` = &quot;black&quot;, `6` = &quot;blue&quot;, `8` = &quot;green&quot;)) ) %&gt;% layout(showlegend = FALSE) For scatterplots, the size argument controls the area of markers (unless otherwise specified via sizemode), and must be a numeric variable. The sizes argument controls the minimum and maximum size of circles, in pixels: subplot( add_markers(p, size = ~cyl, name = &quot;default&quot;), add_markers(p, size = ~cyl, sizes = c(1, 500), name = &quot;custom&quot;) ) 2.1.1.1 Scatterplot matrices I currently recommend creating scatterplot matrices via the ggpairs() function from the GGally package (Schloerke et al. 2016) and using the ggplotly() function to convert it. pm &lt;- GGally::ggpairs(iris) ggplotly(pm) 2.1.2 Dotplots &amp; Error bars A dotplot is similar to a scatterplot, except instead of two numeric axes, one is categorical. The usual goal of a dotplot is to compare value(s) on a numerical scale over numerous categories. In this context, dotplots are preferrable to pie charts since comparing position along a common scale is much easier than comparing angle or area (Cleveland and McGill 1984); (Bostock 2010). Furthermore, dotplots can be preferrable to bar charts, especially when comparing values within a narrow range far away from 0 (Few 2006). Also, when presenting point estimates, and uncertainty associated with those estimates, bar charts tend to exaggerate the difference in point estimates, and lose focus on uncertainty (Messing 2012). A popular application for dotplots (with error bars) is the so-called “coefficient plot” for visualizing the point estimates of coefficients and their standard error. The coefplot() function in the coefplot package (Lander 2016) and the ggcoef() function in the GGally both produce coefficient plots for many types of model objects in R using ggplot2, which we can translate to plotly via ggplotly(). Since these packages use points and segments to draw the coefficient plots, the hover information is not the best, and it’d be better to use error objects. Figure ?? uses the tidy() function from the broom package (Robinson 2016) to obtain a data frame with one row per model coefficient, and produce a coefficient plot with error bars along the x-axis. m &lt;- lm(Sepal.Length ~ Sepal.Width * Petal.Length * Petal.Width, data = iris) # arrange by estimate, then make term a factor to order categories in the plot d &lt;- broom::tidy(m) %&gt;% arrange(desc(estimate)) %&gt;% mutate(term = factor(term, levels = term)) plot_ly(d, x = ~estimate, y = ~term) %&gt;% add_markers(error_x = ~list(value = std.error)) %&gt;% layout(margin = list(l = 200)) 2.1.3 Lines 2.1.4 Paths 2.1.5 Segments 2.1.6 Ribbons Ribbons are useful for showing uncertainy bounds as a function of x. The add_ribbons() function creates ribbons and requires the arguments: ymin and ymax. m &lt;- lm(mpg ~ wt, data = mtcars) broom::augment(m) %&gt;% plot_ly(x = ~wt, showlegend = FALSE) %&gt;% add_markers(y = ~mpg, color = I(&quot;black&quot;)) %&gt;% add_ribbons(ymin = ~.fitted - 1.96 * .se.fit, ymax = ~.fitted + 1.96 * .se.fit, color = I(&quot;gray80&quot;)) %&gt;% add_lines(y = ~.fitted, color = I(&quot;steelblue&quot;)) 2.1.7 Area 2.1.8 Polygons "],
["bar-charts.html", "2.2 Bar charts", " 2.2 Bar charts "],
["histograms.html", "2.3 Histograms", " 2.3 Histograms "],
["contour-plots.html", "2.4 Contour plots", " 2.4 Contour plots "],
["d.html", "2.5 3D", " 2.5 3D "],
["annotations.html", "2.6 Annotations", " 2.6 Annotations The add_annotations() function -->"],
["subplot.html", "3 The subplot() function", " 3 The subplot() function The subplot() function provides a flexible interface for arranging multiple plotly plots in a single view. It is more flexible than most trellis display frameworks (e.g., ggplot2’s facet_wrap()) as you don’t have to condition on a value of common variable in each display (Richard A. Becker 1996). Its capabilities and interface is similar to the grid.arrange() function from the gridExtra package, which allows you to arrange multiple grid grobs in a single view, effectively providing a way to arrange (possibly unrelated) ggplot2 and/or lattice plots in a single view (R Core Team 2016); (Auguie 2016); (Sarkar 2008). The simplest way to use it is to pass plotly objects directly to subplot(). library(plotly) p1 &lt;- plot_ly(economics, x = ~date, y = ~unemploy, name = &quot;unemploy&quot;) %&gt;% add_lines() p2 &lt;- plot_ly(economics, x = ~date, y = ~uempmed, name = &quot;uempmed&quot;) %&gt;% add_lines() subplot(p1, p2) Although subplot() accepts an arbitrary number of plot objects, passing a list of plots can save typing and redundant code when dealing with a large number of plots. To demonstrate, let’s create one time series for each variable in the economics dataset and share the x-axis so that zoom/pan events are synchronized across each series: vars &lt;- setdiff(names(economics), &quot;date&quot;) plots &lt;- lapply(vars, function(var) { plot_ly(economics, x = ~date, y = as.formula(paste0(&quot;~&quot;, var)), name = var) %&gt;% add_lines() }) subplot(plots, nrows = length(plots), shareX = TRUE, titleX = FALSE) A plotly subplot is a single plotly graph with multiple traces anchored on different axes. If you pre-specify an axis ID for each trace, subplot() will respect that ID. Figure ?? uses this fact in correspondence with the fact that mapping a discrete variable to color creates one trace per value. In addition to providing more control over trace placement, this provides a convenient way to control coloring (we could have symbol/linetype to acheive the same effect). economics %&gt;% tidyr::gather(variable, value, -date) %&gt;% transform(id = as.integer(factor(variable))) %&gt;% plot_ly(x = ~date, y = ~value, color = ~variable, colors = &quot;Dark2&quot;, yaxis = ~paste0(&quot;y&quot;, id)) %&gt;% add_lines() %&gt;% subplot(nrows = 5, shareX = TRUE) Conceptually, subplot() provides a way to place a collection of plots into a table with a given number of rows and columns. The number of rows (and, by consequence, the number of columns) is specified via the nrows argument. By default each row/column shares an equal proportion of the overall height/width, but as shown in the diagram below, that default can be changed via the heights and widths arguments. This flexibility is quite useful for a number of visualizations, for example, a joint density plot (the new heatmaply package is another good example). x &lt;- rnorm(100) y &lt;- rnorm(100) s &lt;- subplot( plot_ly(x = x, type = &quot;histogram&quot;, color = I(&quot;black&quot;)), plotly_empty(), plot_ly(x = x, y = y, color = I(&quot;black&quot;)), plot_ly(y = y, color = I(&quot;black&quot;)), nrows = 2, heights = c(0.2, 0.8), widths = c(0.8, 0.2), shareX = TRUE, shareY = TRUE, titleX = FALSE, titleY = FALSE ) layout(s, showlegend = FALSE) Note that, since subplot() returns a plotly object, any layout attribute can be modified downstream via layout(). "],
["recursive-subplots.html", "3.1 Recursive subplots", " 3.1 Recursive subplots The subplot() function is designed to work recursively so that you can have subplots of subplots. This idea is useful when your desired layout doesn’t conform to the table structure described in the previous section. In fact, you can think of a subplot of subplots like a spreadsheet with merged cells. plotList &lt;- function(nplots) { lapply(seq_len(nplots), function(x) plot_ly()) } s1 &lt;- subplot(plotList(6), nrows = 2, shareX = TRUE, shareY = TRUE) s2 &lt;- subplot(plotList(2), shareY = TRUE) subplot(s1, s2, plot_ly(), nrows = 3, margin = 0.04, heights = c(0.6, 0.3, 0.1)) The concept is particularly useful when you want plot(s) in a given row to have different widths from plot(s) in another row. # specify some map projection/options g &lt;- list( scope = &#39;usa&#39;, projection = list(type = &#39;albers usa&#39;), lakecolor = toRGB(&#39;white&#39;) ) # create a map of population density density &lt;- state.x77[, &quot;Population&quot;] / state.x77[, &quot;Area&quot;] map &lt;- plot_ly(z = ~density, text = state.name, locations = state.abb) %&gt;% add_choropleth(locationmode = &#39;USA-states&#39;) %&gt;% layout(geo = g) # create a bunch of horizontal bar charts vars &lt;- colnames(state.x77) barcharts &lt;- lapply(vars, function(var) { plot_ly(x = state.x77[, var], y = state.name) %&gt;% add_bars(orientation = &quot;h&quot;, name = var) %&gt;% layout(showlegend = FALSE, hovermode = &quot;y&quot;, yaxis = list(showticklabels = FALSE)) }) subplot( subplot(barcharts, margin = 0.01), map, nrows = 2, heights = c(0.3, 0.7) ) "],
["ggplot2-subplots.html", "3.2 ggplot2 subplots", " 3.2 ggplot2 subplots The subplot() function also understands ggplot2 objects, and converts them to an interactive web-based version via ggplotly() before arranging them in the final layout. e &lt;- tidyr::gather(economics, variable, value, -date) gg1 &lt;- ggplot(e, aes(date, value)) + geom_line() + facet_wrap(~variable, scales = &quot;free_y&quot;, ncol = 1) gg2 &lt;- ggplot(e, aes(factor(1), value)) + geom_violin() + facet_wrap(~variable, scales = &quot;free_y&quot;, ncol = 1) + theme(axis.text = element_blank(), axis.ticks = element_blank()) subplot(gg1, gg2) %&gt;% layout(margin = list(l = 50)) -->"],
["advanced-interactive-techniques.html", "4 Advanced interactive techniques", " 4 Advanced interactive techniques The code is this section is still under development and is likely to change. To run any of the code you see in this section, you’ll need this developmental version of the package: devtools::install_github(“ropensci/plotly#554”) As discussed in previous chapters, plotly graphs have zoom, pan, and identification type interactions enabled by default. This chapter will discuss ways we can enable other types of useful interactions listed in Table 4.1. Table 4.1: A taxonomy of interaction types Technique Related Questions Examples Identification What is this point/mark? Hover for additional info Zoom &amp; pan Is there local structure that can’t be viewed globally? Click &amp; drag to alter x/y axis limits Animation How does a distribution change over time? How does a fitted model look when projected into high-dimensional space? The grand tour Linked highlighting How does the marginal/joint compare to a conditional? Linked brushing on a scatterplot matrix Filter How does this subset compare to another? What happened during this time period? Click on legend entries shiny::selectInput() / shiny::sliderInput() "],
["highlighting.html", "4.1 Highlighting", " 4.1 Highlighting TODO: talk about how this improves the example in the first chapter library(plotly) library(crosstalk) d &lt;- SharedData$new(txhousing, ~city) p &lt;- ggplot(d, aes(date, median, group = city)) + geom_line(geom = &quot;line&quot;) ggplotly(p, tooltip = &quot;city&quot;) %&gt;% highlight(on = &quot;plotly_hover&quot;, color = &quot;red&quot;) TODO: Talk about the convenience of having “standard” events generated across chart types. When working with something like D3, you typically have to bind to DOM elements when attaching listeners, which does not generalize well. "],
["linked-highlighting.html", "4.2 Linked highlighting", " 4.2 Linked highlighting Linked highlighting between facets library(crosstalk) sd &lt;- SharedData$new(txhousing, ~year) p &lt;- ggplot(sd, aes(month, median)) + geom_line(aes(group = city)) + geom_smooth(method = &quot;gam&quot;) + facet_wrap(~ year) ggplotly(p) %&gt;% highlight(&quot;plotly_hover&quot;) TODO: show 06-plotly-pipeline.R example. Explain the importance of the pipeline. "],
["current-limitations.html", "4.3 Current limitations", " 4.3 Current limitations Currently not working with filled polygons (TODO: is this still true?) – https://github.com/plotly/plotly.js/issues/884 Currently not working with gl2d – https://github.com/plotly/plotly.js/issues/886 Currently leaflet is the only htmlwidget, with crosstalk support, that will respect non-default arguments in plotly’s highlight() function. -->"],
["animation.html", "5 Animation", " 5 Animation TODO: implement this! Do an example with touring "],
["shiny.html", "6 shiny", " 6 shiny "],
["accessing-plotly-js-events-in-r-without-shiny.html", "7 Accessing plotly.js events in R, without shiny", " 7 Accessing plotly.js events in R, without shiny Accessing plotly.js events in shiny is easy (for example), but shiny adds a lot of additional infrastructure that makes it hard to share your work, especially at scale. Very soon, plotly R users will have ways to perform highlighting and linked highlighting without shiny or any knowledge of HTML/JavaScript. However, if you do know some JavaScript, you can access (and respond to) plotly.js events without shiny, without having to leave the comfort of your R prompt, thanks to the onRender() function from the htmlwidgets package (Vaidyanathan et al. 2016). This function allows you to write a JavaScript function which will be invoked on the htmlwidget object after it is done rendering. This JavaScript function should have at least two arguments: (1) the DOM element containing the htmlwidget (el) and (2) the data passed from R (x). Here we use the onRender() function to send “event data” to the browser’s console upon hovering a point. library(plotly) library(htmlwidgets) plot_ly(mtcars, x = ~wt, y = ~mpg) %&gt;% onRender(&quot; function(el, x) { var gd = document.getElementById(el.id); gd.on(&#39;plotly_hover&#39;, function(pt) { console.log(&#39;hover&#39;, pt); }); } &quot;) "],
["plotly-interface-internals.html", "8 plotly interface internals", " 8 plotly interface internals This chapter describes some of the internals of the plotly package – specifically how it interfaces with the plotly.js graphing library. The plotly.js library (as with many other JavaScript graphing libraries) strives to describe any plot through a plot specification defined via JavaScript Object Notation (JSON). JSON is a language independent data-interchange format that was originally designed for JavaScript, but parsers for many different languages now exist, including R (Temple Lang 2014); (Ooms 2014). JSON is a recursive key-value data structure (similar to a list in R), and essentially any valid JavaScript value has a natural R equivalent (e.g., NULL/null). As a result, any JSON object can be created from an appropriate R list, meaning that theoretically any plotly.js plot can be described via an R list. The idea of interfacing R with JavaScript libraries via JSON data transfer has been popular way for quite some time (Vaidyanathan 2013); (???); (T. D. Hocking, VanderPlas, and Sievert 2015). The R package htmlwidgets standardized this bridge, and provides some additional infrastructure for making sure the HTML output works as expected in multiple contexts (in the R console or RStudio, within rmarkdown documents, and embedded inside shiny apps). The htmlwidgets also provides ways for both widget authors and users to extend the functionality of the underlying JavaScript library. In fact, the plotly package uses this mechanism to extend the plotly.js graphing library and enable all the material in Advanced interactive techniques. "],
["ensuring-type-safety-in-data-transfer.html", "8.1 Ensuring type safety in data transfer", " 8.1 Ensuring type safety in data transfer TODO: talk about using plotly.js plot schema for ensuring type safety, and throwing informative messages… "],
["plotly-object-representation.html", "8.2 plotly object representation", " 8.2 plotly object representation Inherits from an htmlwidget object Lazy evaluation of arguments "],
["miscellanous.html", "8.3 Miscellanous", " 8.3 Miscellanous Importance of generic functions for an extensible interface -->"],
["extending-ggplotly-and-plotly.html", "9 Extending ggplotly and plotly ", " 9 Extending ggplotly and plotly "],
["converting-custom-geoms.html", "9.1 Converting custom geoms", " 9.1 Converting custom geoms https://github.com/hrbrmstr/ggalt https://github.com/haleyjeppson/geom_mosaic "],
["wrappers-for-domain-specific-viz.html", "9.2 Wrappers for domain-specific viz", " 9.2 Wrappers for domain-specific viz https://github.com/talgalili/heatmaply https://github.com/natydasilva/PPforest -->"],
["references.html", "10 References", " 10 References Auguie, Baptiste. 2016. GridExtra: Miscellaneous Functions for “Grid” Graphics. https://CRAN.R-project.org/package=gridExtra. Bache, Stefan Milton, and Hadley Wickham. 2014. Magrittr: A Forward-Pipe Operator for R. https://CRAN.R-project.org/package=magrittr. Bostock, Jeffrey Heer AND Michael. 2010. “Crowdsourcing Graphical Perception: Using Mechanical Turk to Assess Visualization Design.” In ACM Human Factors in Computing Systems (Chi), 203–12. http://vis.stanford.edu/papers/crowdsourcing-graphical-perception. Cleveland, William S, and Robert McGill. 1984. “Graphical Perception: Theory, Experimentation, and Application to the Development of Graphical Methods.” Journal of the American Statistical Association 79 (September): 531–54. Data Science, Berkeley Institute for. 2016. “Mpl Colormaps.” http://web.archive.org/web/20160601125258/http://bids.github.io/colormap/. de Jong, Jos, and Kenton Russell. 2016. Listviewer: ’Htmlwidget’ for Interactive Views of R Lists. https://github.com/timelyportfolio/listviewer. Few, Stephen. 2006. “Data Visualization: Rules for Encoding Values in Graph.” https://web.archive.org/web/20160404214629/http://www.perceptualedge.com/articles/b-eye/encoding_values_in_graph.pdf. Garnier, Simon. 2016. ViridisLite: Default Color Maps from ’Matplotlib’ (Lite Version). https://CRAN.R-project.org/package=viridisLite. Hocking, Toby Dylan, Susan VanderPlas, and Carson Sievert. 2015. Animint: Interactive Animations. Hyndman, Rob J. n.d. Forecast: Forecasting Functions for Time Series and Linear Models. http://github.com/robjhyndman/forecast. Lander, Jared P. 2016. Coefplot: Plots Coefficients from Fitted Models. https://CRAN.R-project.org/package=coefplot. Messing, Solomon. 2012. “Visualization Series: Insight from Cleveland and Tufte on Plotting Numeric Data by Groups.” http://web.archive.org/web/20160602202734/https://solomonmessing.wordpress.com/2012/03/04/visualization-series-insight-from-cleveland-and-tufte-on-plotting-numeric-data-by-groups/. Neuwirth, Erich. 2014. RColorBrewer: ColorBrewer Palettes. https://CRAN.R-project.org/package=RColorBrewer. Ooms, Jeroen. 2014. “The Jsonlite Package: A Practical and Consistent Mapping Between Json Data and R Objects.” ArXiv:1403.2805 [Stat.CO]. http://arxiv.org/abs/1403.2805. R Core Team. 2016. R: A Language and Environment for Statistical Computing. Vienna, Austria: R Foundation for Statistical Computing. https://www.R-project.org/. Richard A. Becker, Ming-Jen Shyu, William S. Cleveland. 1996. “The Visual Design and Control of Trellis Display.” Journal of Computational and Graphical Statistics 5 (2). [American Statistical Association, Taylor &amp; Francis, Ltd., Institute of Mathematical Statistics, Interface Foundation of America]: 123–55. http://www.jstor.org/stable/1390777. Robinson, David. 2016. Broom: Convert Statistical Analysis Objects into Tidy Data Frames. https://CRAN.R-project.org/package=broom. Sarkar, Deepayan. 2008. Lattice: Multivariate Data Visualization with R. New York: Springer. http://lmdvr.r-forge.r-project.org. Schloerke, Barret, Jason Crowley, Di Cook, Francois Briatte, Moritz Marbach, Edwin Thoen, Amos Elberg, and Joseph Larmarange. 2016. GGally: Extension to ’Ggplot2’. Sievert, Carson, Chris Parmer, Toby Hocking, Scott Chamberlain, Karthik Ram, Marianne Corvellec, and Pedro Despouy. 2016. Plotly: Create Interactive Web Graphics via ’Plotly.js’. Temple Lang, Duncan. 2014. RJSONIO: Serialize R Objects to Json, Javascript Object Notation. http://CRAN.R-project.org/package=RJSONIO. Vaidyanathan, Ramnath. 2013. RCharts: Interactive Charts Using Javascript Visualization Libraries. https://github.com/ramnathv/rCharts/. Vaidyanathan, Ramnath, Yihui Xie, JJ Allaire, Joe Cheng, and Kenton Russell. 2016. Htmlwidgets: HTML Widgets for R. https://CRAN.R-project.org/package=htmlwidgets. Wickham, Hadley. 2009. Ggplot2: Elegant Graphics for Data Analysis. Springer-Verlag New York. http://ggplot2.org. ———. 2010. “A Layered Grammar of Graphics.” Journal of Computational and Graphical Statistics 19 (1): 3–28. ———. 2016. Tidyr: Easily Tidy Data with ‘Spread()‘ and ‘Gather()‘ Functions. https://github.com/hadley/tidyr. Wickham, Hadley, and Romain Francois. 2016. Dplyr: A Grammar of Data Manipulation. https://CRAN.R-project.org/package=dplyr. Wickham, Hadley, Michael Lawrence, Dianne Cook, Andreas Buja, Heike Hofmann, and Deborah F Swayne. 2010. “The Plumbing of Interactive Graphics.” Computational Statistics, April, 1–7. Wilkinson, Leland. 2005. The Grammar of Graphics (Statistics and Computing). Secaucus, NJ, USA: Springer-Verlag New York, Inc. William S. Cleveland, Robert McGill, Marylyn E. McGill. 1988. “The Shape Parameter of a Two-Variable Graph.” Journal of the American Statistical Association 83 (402). [American Statistical Association, Taylor &amp; Francis, Ltd.]: 289–300. http://www.jstor.org/stable/2288843. "]
]
